const e=e=>{e.setAttribute("pattern","^[A-Za-z\\d](?:[A-Za-z\\d]|-(?=[A-Za-z\\d])){0,38}$")},t=e=>{e.addEventListener("invalid",(()=>{const t=e.validity;t.valueMissing?e.setCustomValidity("required"):t.patternMismatch?e.setCustomValidity("enter valid github username"):t.tooShort?e.setCustomValidity("too short"):t.tooLong&&e.setCustomValidity("too long")}))},r=e=>{e.addEventListener("input",(()=>{e.setCustomValidity("")}))},i=([e,t],r)=>{t.addEventListener("submit",(i=>{console.info("username submitted"),e.blur(),i.preventDefault(),t.checkValidity(),r(e.value)}))},o={mainHandler:o=>{const n=document.querySelector("#username-input"),a=document.querySelector("#submit-form");e(n),t(n),r(n),i([n,a],o)}},n={constructUrl:e=>"https://api.github.com/search/commits"+`?q=author:${e}`+"&order=asc&sort=committer-date"},a={getData:async(e,t)=>{try{const r=await e(t);return await r.json()}catch(e){return e}}},s=e=>{const t=e.items[0];return{_avatar:t.author.avatar_url,_name:t.commit.author.name,_userHandle:t.author.login,_commitMsg:t.commit.message,_date:t.commit.author.date,_repo:t.repository.name,_profileUrl:t.author.html_url,_commitUrl:t.html_url,_repoUrl:t.repository.html_url}},l=e=>new Date(e).toLocaleDateString(),c={renderTemplate:(e,t,r)=>{if(!document.querySelector(e)){r=document.querySelector(r);const e=(t=document.querySelector(t)).content.cloneNode(!0);r.appendChild(e)}},renderData:e=>{const{_avatar:t,_name:r,_userHandle:i,_commitMsg:o,_date:n,_repo:a,_profileUrl:c,_commitUrl:m,_repoUrl:u}=s(e),d=document.querySelector("#avatar"),p=document.querySelector("#name"),h=document.querySelector("#userhandle"),y=document.querySelector("#commitmsg"),v=document.querySelector("#date"),S=document.querySelector("#repo"),_=document.querySelector("#profileurl"),f=document.querySelector("#commiturl"),g=document.querySelector("#repourl"),q=l(n),L=o.split("\n")[0];d.src=t,p.textContent=r,h.textContent=`@${i}`,y.textContent=L,v.textContent=q,S.textContent=a,_.href=c,f.href=m,g.href=u},removeElement:function(e){const t=document.querySelector(e);t&&t.remove()},elementList:{jumbotron:".jumbotron",cardContainer:".row",notFound:"#container404",template404:"#page404",container:"#container",cardTemplate:"#card-template",card:".card",avatar:"#avatar",name:"#name",userHandle:"#userhandle",commitMsg:"#commitmsg",date:"#date",repo:"#repo",profileUrl:"#profileurl",commitUrl:"#commiturl",repoUrl:"#repourl"}};class m{constructor(e,t,r,i){this.inputService=e,this.dataService=t,this.displayService=r,this.utilityService=i,console.info("app::running")}run(){this.inputService.mainHandler((async e=>{try{const t=this.utilityService.constructUrl(e),r=await this.dataService.getData(fetch,t);if(void 0===r.items||0===r.items.length)throw this.displayService.removeElement(this.displayService.elementList.notFound),this.displayService.removeElement(this.displayService.elementList.jumbotron),this.displayService.removeElement(this.displayService.elementList.card),this.displayService.renderTemplate(this.displayService.elementList.container404,this.displayService.elementList.template404,this.displayService.elementList.container),new Error("username not found!");this.displayService.removeElement(this.displayService.elementList.jumbotron),this.displayService.removeElement(this.displayService.elementList.notFound),this.displayService.renderTemplate(this.displayService.elementList.card,this.displayService.elementList.cardTemplate,this.displayService.elementList.container),this.displayService.renderData(r),console.info(r.items[0])}catch(e){console.error(e)}}))}}new m(o,a,c,n).run();
//# sourceMappingURL=index.a8de970a.js.map
